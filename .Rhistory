(sample(1:6,1)+1)*2
#heal
(sample(1:6,1)+1)*2
#heal
(sample(1:6,1)+1)*2
#heal
sumrep(((sample(1:6,1)+1)*2),2))
#heal
sum(rep(((sample(1:6,1)+1)*2),2))
rep(((sample(1:6,1)+1)*2),2)
sample(1:6,1)+1)*2
sample(1:6,1)+1)*2)
sample(1:6,1)
sample(1:6,1)+1
(sample(1:6,1)+1)*2)
(sample(1:6,1)+1)*2
((sample(1:6,1)+1)*2)
rep(((sample(1:6,1)+1)*2),2)
replicate(((sample(1:6,1)+1)*2),2)
(sample(1:6,1)+1)*2
(sample(1:6,1)+1)*2
?replicate
#heal
sample(1:6,2)+1)*2)
#heal
sample(1:6,2)+1)*2
#heal
(sample(1:6,2)+1)*2
#heal
sum(c((sample(1:6,2)+1)*2))
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
c((sample(1:6,2)+1)*2)
#heal
npotions = 1
sum(c((sample(1:6,2)+npotions)*2))
sum(c((sample(1:6,2)+npotions)*2))
sum(c((sample(1:6,npotions)+1)*2))
sample(1:8,npotions)
sample(1:8,npotions)
#heal - doubled because of necklace
npotions = 5
sum(sample(1:8,npotions))
sum(sample(1:8,npotions))
sample(1:8,npotions)
#heal - doubled because of necklace
npotions = 5
sum(c((sample(1:6,npotions)+1)*2))
#heal - doubled because of necklace
npotions = 2
sum(c((sample(1:6,npotions)+1)*2))
#fireball 8d6
sum(sample(1:8, 6, replace=T))
sample(1:20,1) #magic surge
sample(1:20,1) #magic surge
sample(1:100,1)
#heal - doubled because of necklace
npotions = 1
sum(c((sample(1:6, replace=T, npotions)+1)*2))
#magic missle (3d4+1 @4th lvl, +1 die per level)
dice = 8
sum(sample(1:4, dice, replace=T))+(dice)
sample(1:20,1) #magic surge
sample(1:100,1)
sum(sample(1:4, dice, replace=T))+(dice)
sample(1:20,1) #magic surge
sample(1:100,1)
sum(c(sample(1:6, dice, replace=T),(dice*1))
)
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sample(1:6, dice, replace=T)
#short rest - doubled because of necklace
dice = 1
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
#short rest - doubled because of necklace
dice = 2
sum(c(sample(1:6, dice, replace=T),(dice*1)))*2
sample(c(1:6), replace=T, n=25)
sample(c(1:6), 25, replace=T)
table(sample(c(1:6), 25, replace=T))
table(sample(c(1:6), 50, replace=T))
sample(c(1:8),1,replace=T)+4
sample(c(1:8),1,replace=T)+4
rep((sample(c(1:8),1,replace=T)+4),5)
sum(rep((sample(c(1:8),1,replace=T)+4),5))
sum(rep((sample(c(1:8),5,replace=T)+5),5))
n=5
sum(rep((sample(c(1:8),n,replace=T)+n),1))
sum(rep((sample(c(1:8),n,replace=T)+n),1))
n=i=null
n=i=NULL
n=i=NULL
while(n<75)(
i = i+1
n = n + sample(c(1:8),n,replace=T)+4
n=i=NULL
while(n<75)(
i = i+1
n = n + sample(c(1:8),1) + 4
n=0
i=NULL
while(n<75)(
i = i+1
n = n + sample(c(1:8),1) + 4
n=0
i=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
i
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
for(n in 1:1000){
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)}
ii=NULL
for(n in 1:1000){
n=0
i=0
ii=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)}
hist(ii)
ii
for(n in 1:1000){
n=0
i=0
ii=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
ii
ii
for(nn in 1:1000){
n=0
i=0
ii=NULL
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
i
ii
ii=NULL
ii=NULL
for(nn in 1:1000){
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
hist(ii)
for(nn in 1:10000){
n=0
i=0
while(n<75){
i = i+1
n = n + sample(c(1:8),1) + 4
}
ii = c(ii,i)
}
hist(ii)
hist(ii, main="number of roles to get >75")
hist(ii, main="number of roles to get >75", xlab="number of roles")
#chatbook
hitpoints = 75
?
map
library(maps)
library(dplyr)
library(geosphere)
library(scales)
?map
citation('maps')
install.packages("metafor")
?escala
library(metafor)
?escala
?escalc
exp(0.35)
exp(-1.86)
exp(1.86)
data = read.table("~/Desktop/dates.csv", header=T, sep=",")
head(data)
hist(data$Monthday)
range(data$Monthday)
range(data$Monthday, na.rm=T)
hist(data$Monthday, xlim=c(1,13), breaks=seq(1,13,0.1))
hist(data$Monthday, xlim=c(1,13), breaks=seq(1,13,0.25))
hist(data$Monthday, xlim=c(0,13), breaks=seq(1,13,0.25))
hist(data$Monthday, xlim=c(0,14), breaks=seq(1,13,0.25))
hist(data$Monthday, xlim=c(0,14), breaks=seq(1,13,0.25), main="eco_evo jobs posting date")
hist(data$Monthday, xlim=c(0,14), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date")
hist(data$Monthday, xlim=c(0,14), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="month.day")
hist(data$Monthday, xlim=c(0,14), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="Month.day")
hist(data$Monthday, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="Month.day")
hist(data$Monthday, xlim=c(0,13), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="Month.day")
hist(data$Monthday, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="Month.day")
?axis
data = read.table("~/Desktop/dates.csv", header=T, sep=",")
data = read.table("~/Desktop/dates.csv", header=T, sep=",")
data = read.table("~/Desktop/dates.csv", header=T, sep=",")
data = read.table("~/Desktop/dates.csv", header=T, sep=",")
head(data)
hist(data$PostMonthday, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="Month.day")
hist(data$ReviewMonthDay, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net review date", xlab="Month.day")
range(data$data$ReviewMonthDay, na.rm=T)
data = read.table("~/Desktop/dates.csv", header=T, sep=",")
range(data$data$ReviewMonthDay, na.rm=T)
View(data)
hist(data$ReviewMonthDay, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net review date", xlab="Month.day")
par(bg=NA)
hist(data$PostMonthday, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="Month.day")
hist(data$ReviewMonthDay, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net review date", xlab="Month.day")
par(bg=NA)
hist(data$PostMonthday, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net posting date", xlab="Month.day", col="firebrick3")
hist(data$ReviewMonthDay, xlim=c(1,13), breaks=seq(1,13,0.25), main="ecoevojobs.net review date", xlab="Month.day", col="dodgerblue3")
source("~/whendue.R")
source("~/whendue.R")
par(bg=NA)
hist(data$PostMonthday, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), main="ecoevojobs.net posting/review date", xlab="Month.day", col="firebrick3")
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col="dodgerblue3")
source("~/whendue.R")
par(bg=NA)
hist(data$PostMonthday, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), main="ecoevojobs.net posting/review date", xlab="Month.day", col="firebrick3")
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col="dodgerblue3", main="")
par(bg=NA)
hist(data$PostMonthday, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), main="ecoevojobs.net posting/review date", xlab="Month.day", col="firebrick3")
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col="dodgerblue3", main="", xlab="", ylab="")
library(scales)
source("~/whendue.R")
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col=alpha("dodgerblue3", 0.5), main="", xlab="", ylab="")
par(bg=NA)
hist(data$PostMonthday, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), main="ecoevojobs.net posting/review date", xlab="Month.day", col=alpha("firebrick3", 0.5))
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col=alpha("dodgerblue3", 0.5), main="", xlab="", ylab="")
hist(data$PostMonthday, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), main="ecoevojobs.net posting/review date", xlab="Month.day", col=alpha("firebrick3", 0.8))
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col=alpha("dodgerblue3", 0.5), main="", xlab="", ylab="")
hist(data$PostMonthday, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), main="ecoevojobs.net posting/review date", xlab="Month.day", col=alpha("firebrick3", 0.8))
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col=alpha("dodgerblue3", 0.3), main="", xlab="", ylab="")
source("~/whendue.R")
par(bg="white")
hist(data$PostMonthday, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), main="ecoevojobs.net posting/review date", xlab="Month.day", col=alpha("firebrick3", 0.8))
par(bg=NA)
hist(data$ReviewMonthDay, xlim=c(1,13), ylim=c(0,50), breaks=seq(1,13,0.25), axes=F, col=alpha("dodgerblue3", 0.3), main="", xlab="", ylab="")
# # Step 1: Install Required Packages
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(c("BSgenome", "Biostrings", "GenomicRanges"))
#load data
#genome_file <- "/home/gfl0003/kratepi/ref_fasta/dspec_genbank_assem.fa"
genome_file = "~/Desktop/dspec_genbank_assem.fa"
#load data
#genome_file <- "/home/gfl0003/kratepi/ref_fasta/dspec_genbank_assem.fa"
ref_genome = readDNAStringSet(filepath = "~/Desktop/dspec_genbank_assem.fa")
#load data
#genome_file <- "/home/gfl0003/kratepi/ref_fasta/dspec_genbank_assem.fa"
genome_file = "~/Desktop/dspec_genbank_assem.fa"
ref_genome = readDNAStringSet(filepath = genome_file)
#install.packages("BiocManager")
#BiocManager::install(c("BSgenome", "Biostrings", "GenomicRanges"))
library(BSgenome)
library(Biostrings)
library(GenomicRanges)
ref_genome = readDNAStringSet(filepath = "~/Desktop/dspec_genbank_assem.fa")
#characteristics to identify
slen  = 200 #at least 200 bp window
gccon = 0.5 #GC proportion within the slen window
cpg   = 0.6 #ratio of observed CpG sequences in slen window to expected, expect.CpG=(#CÃ—#G/TotalBases)
?letterFrequency
gc_bases = letterFrequency(ref_genome, letters = c("G", "C"), as.prob = TRUE)
gc_content = sum(gc_bases)
gc_content
?seq_along
seq_along(ref_genome)
length(seq_along(ref_genome))
i=1
seq_along(ref_genome)
names(ref_genome)[i]
#get chromosome name and sequence
cname = names(ref_genome)[i]
ref_genome[[i]]
cseq = ref_genome[[i]]
width(chromosome_seq)
width(cseq)
class(cseq)
?width
width(ref_genome[1])
width(ref_genome[[1]])
clen = width(ref_genome[i])
seq(1, clen - slen + 1, by = stepsize)
#other parameters
stepsize = 200 #if equal to slen, windows do not overlap
seq(1, clen - slen + 1, by = stepsize)
start_pos=1
end_pos = start_pos + slen - 1
#get sequence for the current window
window_seq = subseq(cseq, start = start_pos, end = end_pos)
window_seq
#calculate GC content
gc_bases = letterFrequency(window_seq, letters = c("G", "C"), as.prob = TRUE)
gc_content = sum(gc_bases)
gc_content
gc_content < gccon
countPattern
?countPattern
#calculate CpG observed/expected ratio
c_count = countPattern("C", window_seq)
g_count = countPattern("G", window_seq)
cpg_count = countPattern("CG", window_seq)
cpg_count
c_count
g_count
width(window_seq)
expected_cpg = (c_count * g_count) / slen
exp_cpg   = (c_count * g_count) / slen
obsexp_ratio = cpg_count / exp_cpg
obsexp_ratio
obsexp_ratio < cpg
#place to record CpG island locations
cpg_islands = NULL
#get chromosome name and sequence
cname = names(ref_genome)[i]
cseq = ref_genome[[i]]
clen = width(ref_genome[i])
#place to record CpG island locations
cpg_islands = NULL
#sliding windows
for (start_pos in seq(1, clen - slen + 1, by = stepsize)) {
end_pos = start_pos + slen - 1
#get sequence for the current window
window_seq = subseq(cseq, start = start_pos, end = end_pos)
#calculate GC content
gc_bases = letterFrequency(window_seq, letters = c("G", "C"), as.prob = TRUE)
gc_content = sum(gc_bases)
#move to next window if not above desired % GC content
if(gc_content < gccon){next}
#calculate CpG observed/expected ratio
c_count = countPattern("C", window_seq)
g_count = countPattern("G", window_seq)
cpg_count = countPattern("CG", window_seq)
exp_cpg   = (c_count * g_count) / slen
obsexp_ratio = cpg_count / exp_cpg
#move to next window if not above desired CpG ratio
if(obsexp_ratio < cpg){next}
#store CpG island start/stop locations and scaffold
cpg_islands = rbind(cpg_islands, c(cname, start_pos, end_pos, gc_content, obsexp_ratio))
}
traceback()
start_pos
cpg_islands
obsexp_ratio
cpg_count
exp_cpg
exp_cpg==0 | cpg_count==0
#place to record CpG island locations
cpg_islands = NULL
#get chromosome name and sequence
cname = names(ref_genome)[i]
cseq = ref_genome[[i]]
clen = width(ref_genome[i])
#sliding windows
for (start_pos in seq(1, clen - slen + 1, by = stepsize)) {
end_pos = start_pos + slen - 1
#get sequence for the current window
window_seq = subseq(cseq, start = start_pos, end = end_pos)
#calculate GC content
gc_bases = letterFrequency(window_seq, letters = c("G", "C"), as.prob = TRUE)
gc_content = sum(gc_bases)
#move to next window if not above desired % GC content
if(gc_content < gccon){next}
#calculate CpG observed/expected ratio
c_count = countPattern("C", window_seq)
g_count = countPattern("G", window_seq)
cpg_count = countPattern("CG", window_seq)
exp_cpg   = (c_count * g_count) / slen
if(exp_cpg==0 | cpg_count==0){next}
obsexp_ratio = cpg_count / exp_cpg
#move to next window if not above desired CpG ratio
if(obsexp_ratio < cpg){next}
#store CpG island start/stop locations and scaffold
cpg_islands = rbind(cpg_islands, c(cname, start_pos, end_pos, gc_content, obsexp_ratio))
}
View(cpg_islands)
View(cpg_islands)
#reformat and label
cpg_islands = as.data.frame(cpg_islands)
View(cpg_islands)
View(cpg_islands)
colnames(cpg_islands) = c("name", "start_pos", "end_pos", "GCperc", "CpGratio")
View(cpg_islands)
chrom_cpg_islands = cpg_islands
i=2
#iterate through islands and merge adjacent/overlapping windows
current_island = chrom_cpg_islands[1, ]
next_island = chrom_cpg_islands[i, ]
current_island$End
head(current_island)
current_island$end_pos
next_island$start_pos
current_island$end_pos >= (next_island$start_pos - 1)
as.numeric(current_island$end_pos)
as.numeric(current_island$end_pos) >= (as.numeric(next_island$start_pos) - 1)
max(current_island$end_pos, next_island$end_pos)
current_island
!is.null(current_island)
as.numeric(current_island$end_pos) >= (start_pos - 1)
library(SnowballC)
cite('SnowballC')
cite(SnowballC)
library(stm)
cite(stm)
cite("stm")
cite('stm')
citation("stm")
citation("SnowballCC")
citation("SnowballC")
library(ridge)
library(glmnet)
library(lme4)
library(caret)
setwd("/Users/jannawilloughby/Google Drive/My Drive/Willoughby lab/projects - active/pathogen meta/plantpath_rev/")
data = read.table("meta-standardized_feb17.csv", header=T, sep=",")
data$aauthor = data$Study_char
table(data$Disease_Variable_Recat)
#calculate Cohen's d and clean data
m1  = data$Mutant_dis_mean_stand
m2  = data$Wildtype_dis_mean_stand
sd1 = data$Mutant_dis_sd_stand
sd2 = data$Wildtype_dis_sd_stand
n1  = data$Mutant_N
n2  = data$Wildtype_N
data$Cohen_d = (m1 - m2)/ (sqrt(((sd1^2 * (n1 - 1)) + (sd2^2 * (n2 - 1))) / (n1 + n2 - 2)))
hist(data$Cohen_d)
filter.data = data[!is.na(data$Cohen_d),]
filter.data$PathGenus = rep(NA, nrow(filter.data))
for(i in 1:nrow(filter.data)){filter.data$PathGenus[i] = strsplit(filter.data$Pathogen[i], " ")[[1]][1]}
#####distribution of effect sizes in categories####
discats = c("lesion size 1D", "lesion size 2D", "colony diameter", "disease incidence","disease index","fungal biomass","percentage survival") #unique(filter.data$Disease_Variable_Recat)
colors7 = c("dodgerblue3", "firebrick3", "darkorange3", "goldenrod2", "chartreuse3", "darkorchid", "navy")
means=NULL
for(i in 1:length(discats)){
if(i==1){
hist(filter.data$Cohen_d[filter.data$Disease_Variable_Recat==discats[i]], xlim=c(-100,20), ylim=c(0,200), breaks=seq(-100,20,10), col=alpha(colors7[i], 0.5), xlab="Effect Size", ylab="Frequency", main="")
}else{
par(new=T)
hist(filter.data$Cohen_d[filter.data$Disease_Variable_Recat==discats[i]], xlim=c(-100,20), ylim=c(0,200), breaks=seq(-100,20,10), col=alpha(colors7[i], 0.5), xlab="", ylab="", main="", axes=F)
}
means = c(means, mean(filter.data$Cohen_d[filter.data$Disease_Variable_Recat==discats[i]]))
}
table(filter.data$Disease_Variable_Recat)
cbind(discats, means)
####single ridge####
diseaseindex = filter.data[!is.na(filter.data$Cohen_d),] #Disease_Variable_Recat +
trial.all = train(Cohen_d ~ Virulence_factor + PathGenus + Virulence_factor*(Necrotrophic  + Hemibiotrophic + Biotrophic + Saprophytic + Soil + Water +  Air + Leaves.stem + Root.Vascular + Fruits.Flower + Seeds.grains) - 1, data=diseaseindex, method="glmnet", tuneGrid=expand.grid(alpha=0,lambda=seq(0,10,by=0.01)),trControl=trainControl(method="repeatedcv",n=10,repeats=100))
trial.all$bestTune$lambda #the best lambda, need to  plug into next lines of code
diseaseindex.out = linearRidge(Cohen_d ~ Virulence_factor + PathGenus + Virulence_factor*(Necrotrophic  + Hemibiotrophic + Biotrophic + Saprophytic + Soil + Water +  Air + Leaves.stem + Root.Vascular + Fruits.Flower + Seeds.grains) - 1, data=diseaseindex,lambda=trial.all$bestTune$lambda)
diseaseindex.out = linearRidge(Cohen_d ~ Virulence_factor + PathGenus + Virulence_factor*(Necrotrophic  + Hemibiotrophic + Biotrophic + Saprophytic) - 1, data=diseaseindex,lambda=trial.all$bestTune$lambda)
diseaseindex.out = linearRidge(Cohen_d ~ Virulence_factor + PathGenus + Virulence_factor*(Soil + Water +  Air + Leaves.stem + Root.Vascular + Fruits.Flower + Seeds.grains) - 1, data=diseaseindex,lambda=trial.all$bestTune$lambda)
diseaseindex.out = linearRidge(Cohen_d ~ Virulence_factor + PathGenus + Virulence_factor*(Leaves.stem + Root.Vascular + Fruits.Flower + Seeds.grains) - 1, data=diseaseindex,lambda=trial.all$bestTune$lambda)
